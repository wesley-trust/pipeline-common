# Main enforced entry point for all consumer pipelines.
# This template is intended to be referenced via `extends` from a dispatcher
# in a consumer repository. Use Azure DevOps “Protect YAML pipelines” / "Enforce extends"
# (project settings) to require that pipelines extend this template from the
# approved repo and ref.

parameters:
  - name: configuration
    type: object
    default: {}

variables:
  - ${{ each variableGroup in parameters.configuration.variableGroups }}:
      - group: ${{ variableGroup }}

stages:
  # Initialise Stages (optional)

  ## Initialise Stage applicable for all environments

  - ${{ if eq(coalesce(parameters.configuration.setup.runGlobal, true), true) }}:
      - template: stages/initialise-stage.yml@PipelineCommon
        parameters:
          environmentName: "global"
          serviceConnection: ${{ parameters.configuration.serviceConnection }}
          terraformVersion: ${{ coalesce(parameters.configuration.terraformVersion, '') }}

  ## Initialise Stage per environment

  - ${{ each env in parameters.configuration.environments }}:
      - ${{ if ne(env.skipEnvironment, true) }}:
          - ${{ if or(ne(env.class, 'production'), eq(coalesce(parameters.configuration.enableProduction, false), true)) }}:
              - ${{ if eq(coalesce(env.setup.runPerEnvironment, false), true) }}:
                  - template: stages/initialise-stage.yml@PipelineCommon
                    parameters:
                      environmentName: ${{ env.name }}
                      serviceConnection: ${{ coalesce(env.serviceConnection, parameters.configuration.serviceConnection) }}
                      ${{ if ne(coalesce(env.pool.vmImage, env.pool.name, ''), '') }}:
                        pool: ${{ env.pool }}
                      ${{ else }}:
                        pool: ${{ parameters.configuration.defaultPool }}
                      terraformVersion: ${{ coalesce(parameters.configuration.terraformVersion, '') }}
                      dependsOnStages:
                        - ${{ if eq(coalesce(parameters.configuration.setup.runGlobal, false), true) }}:
                            - initialise_global

  # Validate Stage

  ## Validation Stage applicable for all environments

  - template: stages/validation-stage.yml@PipelineCommon
    parameters:
      actionGroups: ${{ parameters.configuration.actionGroups }}
      serviceConnection: ${{ parameters.configuration.serviceConnection }}
      environments: ${{ parameters.configuration.environments }}
      pool: ${{ parameters.configuration.defaultPool }}
      variableRoot: ${{ coalesce(parameters.configuration.variableRoot, 'vars') }}
      validation: ${{ coalesce(parameters.configuration.validation, '') }}
      customValidationScripts: ${{ parameters.configuration.customValidationScripts }}
      enableProduction: ${{ parameters.configuration.enableProduction }}
      additionalRepositories: ${{ coalesce(parameters.configuration.additionalRepositories, '') }}
      keyVault: ${{ coalesce(parameters.configuration.keyVault, '') }}

  # Environment Stages

  ## Review Stage (optional)

  - ${{ each env in parameters.configuration.environments }}:
      - ${{ if ne(env.skipEnvironment, true) }}:
          - ${{ if or(ne(env.class, 'production'), eq(coalesce(parameters.configuration.enableProduction, false), true)) }}:
              - ${{ if eq(coalesce(parameters.configuration.runReviewStage, true), true) }}:
                  - template: stages/review-stage.yml@PipelineCommon
                    parameters:
                      environmentName: ${{ env.name }}
                      ${{ if eq(coalesce(parameters.configuration.drInvocation, false), true) }}:
                        regions:
                          - ${{ env.drRegion }}
                      ${{ elseif eq(coalesce(join(env.secondaryRegions, ','), ''), '') }}:
                        regions:
                          - ${{ env.primaryRegion }}
                      ${{ else }}:
                        regions:
                          - ${{ env.primaryRegion }}
                          - ${{ each secondaryRegion in env.secondaryRegions }}:
                              - ${{ secondaryRegion }}
                      actionGroups: ${{ parameters.configuration.actionGroups }}
                      variableRoot: ${{ coalesce(parameters.configuration.variableRoot, 'vars') }}
                      serviceConnection: ${{ coalesce(env.serviceConnection, parameters.configuration.serviceConnection) }}
                      ${{ if ne(coalesce(env.pool.vmImage, env.pool.name, ''), '') }}:
                        pool: ${{ env.pool }}
                      ${{ elseif eq(coalesce(env.pool.vmImage, env.pool.name, ''), '') }}: # Using elseif instead of else to avoid linter parsing error
                        pool: ${{ parameters.configuration.defaultPool }}
                      runTerraformPlan: ${{ coalesce(parameters.configuration.runTerraformPlan, true) }}
                      runBicepWhatIf: ${{ coalesce(parameters.configuration.runBicepWhatIf, true) }}
                      variableIncludeCommon: ${{ coalesce(env.variables.includeCommon, parameters.configuration.variables.includeCommon, true) }}
                      variableIncludeEnv: ${{ coalesce(env.variables.includeEnv, parameters.configuration.variables.includeEnv, true) }}
                      variableIncludeEnvRegion: ${{ coalesce(env.variables.includeEnvRegion, parameters.configuration.variables.includeEnvRegion, true) }}
                      variableIncludeRegionOnly: ${{ coalesce(env.variables.includeRegionOnly, parameters.configuration.variables.includeRegionOnly, true) }}
                      additionalRepositories: ${{ coalesce(parameters.configuration.additionalRepositories, '') }}
                      keyVault: ${{ coalesce(parameters.configuration.keyVault, '') }}
                      poolRegionDemand: ${{ coalesce(env.poolRegionDemand, false) }}
                      dependsOnStages:
                        - ${{ if ne(env.dependsOn, '') }}:
                            - ${{ env.dependsOn }}

              ## Regional Deployment Stages (non-DrInvocation)

              ### Secondary Region Deployments (if applicable)

              - ${{ if ne(coalesce(parameters.configuration.drInvocation, false), true) }}:
                  - ${{ each secondaryRegion in env.secondaryRegions }}:
                      - template: stages/environment-region-deploy-stage.yml@PipelineCommon
                        parameters:
                          environmentName: ${{ env.name }}
                          regionName: ${{ secondaryRegion }}
                          envClass: ${{ env.class }}
                          enableProduction: ${{ coalesce(parameters.configuration.enableProduction, false) }}
                          variableRoot: ${{ coalesce(parameters.configuration.variableRoot, 'vars') }}
                          allowedBranches: ${{ env.allowedBranches }}
                          actionGroups: ${{ parameters.configuration.actionGroups }}
                          ${{ if ne(coalesce(env.pool.vmImage, env.pool.name, ''), '') }}:
                            pool: ${{ env.pool }}
                          ${{ else }}:
                            pool: ${{ parameters.configuration.defaultPool }}
                          serviceConnection: ${{ coalesce(env.serviceConnection, parameters.configuration.serviceConnection) }}
                          variableIncludeCommon: ${{ coalesce(env.variables.includeCommon, parameters.configuration.variables.includeCommon, true) }}
                          variableIncludeEnv: ${{ coalesce(env.variables.includeEnv, parameters.configuration.variables.includeEnv, true) }}
                          variableIncludeEnvRegion: ${{ coalesce(env.variables.includeEnvRegion, parameters.configuration.variables.includeEnvRegion, true) }}
                          variableIncludeRegionOnly: ${{ coalesce(env.variables.includeRegionOnly, parameters.configuration.variables.includeRegionOnly, true) }}
                          additionalRepositories: ${{ coalesce(parameters.configuration.additionalRepositories, '') }}
                          keyVault: ${{ coalesce(parameters.configuration.keyVault, '') }}
                          poolRegionDemand: ${{ coalesce(env.poolRegionDemand, false) }}
                          dependsOnStages:
                            - ${{ if eq(coalesce(parameters.configuration.runReviewStage, true), true) }}:
                                - review_${{ env.name }}
                            - ${{ elseif ne(env.dependsOn, '') }}:
                                - ${{ env.dependsOn }}
                          bicepModeOverride: ${{ parameters.configuration.bicepModeOverride }}

                  ### Primary Region Deployment

                  - template: stages/environment-region-deploy-stage.yml@PipelineCommon
                    parameters:
                      environmentName: ${{ env.name }}
                      regionName: ${{ env.primaryRegion }}
                      envClass: ${{ env.class }}
                      enableProduction: ${{ coalesce(parameters.configuration.enableProduction, false) }}
                      variableRoot: ${{ coalesce(parameters.configuration.variableRoot, 'vars') }}
                      allowedBranches: ${{ env.allowedBranches }}
                      actionGroups: ${{ parameters.configuration.actionGroups }}
                      ${{ if ne(coalesce(env.pool.vmImage, env.pool.name, ''), '') }}:
                        pool: ${{ env.pool }}
                      ${{ else }}:
                        pool: ${{ parameters.configuration.defaultPool }}
                      serviceConnection: ${{ coalesce(env.serviceConnection, parameters.configuration.serviceConnection) }}
                      variableIncludeCommon: ${{ coalesce(env.variables.includeCommon, parameters.configuration.variables.includeCommon, true) }}
                      variableIncludeEnv: ${{ coalesce(env.variables.includeEnv, parameters.configuration.variables.includeEnv, true) }}
                      variableIncludeEnvRegion: ${{ coalesce(env.variables.includeEnvRegion, parameters.configuration.variables.includeEnvRegion, true) }}
                      variableIncludeRegionOnly: ${{ coalesce(env.variables.includeRegionOnly, parameters.configuration.variables.includeRegionOnly, true) }}
                      additionalRepositories: ${{ coalesce(parameters.configuration.additionalRepositories, '') }}
                      keyVault: ${{ coalesce(parameters.configuration.keyVault, '') }}
                      poolRegionDemand: ${{ coalesce(env.poolRegionDemand, false) }}
                      dependsOnStages:
                        - ${{ if eq(coalesce(parameters.configuration.runReviewStage, true), true) }}:
                            - review_${{ env.name }}
                        - ${{ elseif ne(env.dependsOn, '') }}:
                            - ${{ env.dependsOn }}
                        - ${{ if eq(coalesce(env.dependsOnSecondaryRegions, false), true) }}:
                            - ${{ each secondaryRegion in env.secondaryRegions }}:
                                - deploy_${{ env.name }}_${{ secondaryRegion }}
                      bicepModeOverride: ${{ parameters.configuration.bicepModeOverride }}

              ## Regional Deployment Stages (DrInvocation)

              - ${{ if eq(coalesce(parameters.configuration.drInvocation, false), true) }}:
                  - ${{ if or(ne(env.class, 'production'), eq(coalesce(parameters.configuration.enableProduction, false), true)) }}:
                      - template: stages/environment-region-deploy-stage.yml@PipelineCommon
                        parameters:
                          environmentName: ${{ env.name }}
                          regionName: ${{ coalesce(env.drRegion, env.primaryRegion) }}
                          envClass: ${{ env.class }}
                          enableProduction: ${{ coalesce(parameters.configuration.enableProduction, false) }}
                          variableRoot: ${{ coalesce(parameters.configuration.variableRoot, 'vars') }}
                          allowedBranches: ${{ env.allowedBranches }}
                          actionGroups: ${{ parameters.configuration.actionGroups }}
                          ${{ if ne(coalesce(env.pool.vmImage, env.pool.name, ''), '') }}:
                            pool: ${{ env.pool }}
                          ${{ else }}:
                            pool: ${{ parameters.configuration.defaultPool }}
                          serviceConnection: ${{ coalesce(env.serviceConnection, parameters.configuration.serviceConnection) }}
                          variableIncludeCommon: ${{ coalesce(env.variables.includeCommon, parameters.configuration.variables.includeCommon, true) }}
                          variableIncludeEnv: ${{ coalesce(env.variables.includeEnv, parameters.configuration.variables.includeEnv, true) }}
                          variableIncludeEnvRegion: ${{ coalesce(env.variables.includeEnvRegion, parameters.configuration.variables.includeEnvRegion, true) }}
                          variableIncludeRegionOnly: ${{ coalesce(env.variables.includeRegionOnly, parameters.configuration.variables.includeRegionOnly, true) }}
                          additionalRepositories: ${{ coalesce(parameters.configuration.additionalRepositories, '') }}
                          keyVault: ${{ coalesce(parameters.configuration.keyVault, '') }}
                          poolRegionDemand: ${{ coalesce(env.poolRegionDemand, false) }}
                          dependsOnStages:
                            - ${{ if eq(coalesce(parameters.configuration.runReviewStage, true), true) }}:
                                - review_${{ env.name }}
                            - ${{ elseif ne(env.dependsOn, '') }}:
                                - ${{ env.dependsOn }}
                          bicepModeOverride: ${{ parameters.configuration.bicepModeOverride }}
