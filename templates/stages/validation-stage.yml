parameters:
  - name: actionGroups
    type: object
    default: []
  - name: serviceConnection
    type: string
    default: ""
  - name: environments
    type: object
    default: []
  - name: pool
    type: object
    default: {}
  - name: variableRoot
    type: string
    default: "vars"
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: validation
    type: object
    default: {}
  - name: customValidationScripts
    type: object
    default: []
  - name: additionalRepositories
    type: object
    default: []
  - name: keyVault
    type: object
    default: {}
  - name: enableProduction
    type: boolean
    default: false

stages:
  - stage: validation
    displayName: Validation
    ${{ if ne(coalesce(parameters.pool.name, ''), '') }}:
      pool:
        name: ${{ parameters.pool.name }}
    ${{ elseif ne(coalesce(parameters.pool.vmImage, ''), '') }}:
      pool:
        vmImage: ${{ parameters.pool.vmImage }}
    variables:
      - template: ../variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
      - name: runBicepValidation
        value: ${{ lower(format('{0}', contains(lower(convertToJson(parameters.actionGroups)), '"type":"bicep"'))) }}
      - name: runTerraformValidation
        value: ${{ lower(format('{0}', contains(lower(convertToJson(parameters.actionGroups)), '"type":"terraform"'))) }}
      - name: runPowershellValidation
        value: ${{ lower(format('{0}', contains(lower(convertToJson(parameters.actionGroups)), '"type":"powershell"'))) }}
    jobs:
      - template: ../jobs/validation/validate-settings.yml@PipelineCommon
        parameters:
          environments: ${{ parameters.environments }}
          dependsOnStages: []
          additionalRepositories: ${{ parameters.additionalRepositories }}
          enableProduction: ${{ parameters.enableProduction }}

      - ${{ if ne(coalesce(parameters.validation.enableBranchAllowlist, true), false) }}:
          - template: ../jobs/validation/validate-branch-allowlist.yml@PipelineCommon
            parameters:
              environments: ${{ parameters.environments }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              enableProduction: ${{ parameters.enableProduction }}

      - ${{ if ne(coalesce(parameters.validation.enableVariableIncludes, true), false) }}:
          - template: ../jobs/validation/validate-variable-includes.yml@PipelineCommon
            parameters:
              environments: ${{ parameters.environments }}
              variableRoot: ${{ parameters.variableRoot }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}

      - ${{ if ne(coalesce(parameters.validation.enableTokenTargets, true), false) }}:
          - template: ../jobs/validation/validate-token-targets.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if eq(variables['runBicepValidation'], 'true') }}:
          - template: ../jobs/validation/validate-bicep.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if eq(variables['runTerraformValidation'], 'true') }}:
          - template: ../jobs/validation/validate-terraform.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if eq(variables['runPowershellValidation'], 'true') }}:
          - template: ../jobs/validation/validate-powershell.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if gt(length(parameters.customValidationScripts), 0) }}:
          - job: Custom_Validation
            displayName: Custom Validation Scripts
            steps:
              - checkout: PipelineCommon
              - template: ../steps/download-artifact.yml@PipelineCommon
                parameters:
                  displayName: Download source snapshot
                  artifactName: source-snapshot
                  downloadPath: $(Pipeline.Workspace)/locked-sources
              - ${{ each script in parameters.customValidationScripts }}:
                  - template: ../steps/powershell.yml@PipelineCommon
                    parameters:
                      displayName: Custom Validation
                      scriptFullPath: $(Pipeline.Workspace)/locked-sources/${{ script.path }}
                      arguments: ${{ script.arguments }}
                      ${{ if ne(coalesce(script.workingDirectory, ''), '') }}:
                        workingDirectory: $(Pipeline.Workspace)/locked-sources/${{ script.workingDirectory }}
                      ${{ if and(eq(coalesce(script.workingDirectory, ''), ''), ne(coalesce(script.workingDirectoryFullPath, ''), '')) }}:
                        workingDirectory: ${{ script.workingDirectoryFullPath }}
                      ${{ if and(eq(coalesce(script.workingDirectory, ''), ''), eq(coalesce(script.workingDirectoryFullPath, ''), '')) }}:
                        workingDirectory: $(Pipeline.Workspace)/locked-sources

      # Invoke PowerShell actions in Validation when requested
      - ${{ each actionGroup in parameters.actionGroups }}:
          - ${{ if and(eq(actionGroup.type, 'powershell'), ne(coalesce(actionGroup.actions, ''), '')) }}:
              - ${{ if ne(actionGroup.enabled, false) }}:
                  - ${{ each action in actionGroup.actions }}:
                      - ${{ if ne(action.enabled, false) }}:
                          - ${{ if eq(coalesce(action.runInValidation, false), true) }}:
                              - template: ../jobs/run-powershell.yml@PipelineCommon
                                parameters:
                                  name: ${{ coalesce(action.name, 'ps') }}_validation
                                  displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))) }} (Validation)
                                  scriptPath: ${{ action.scriptPath }}
                                  scriptFullPath: ""
                                  arguments: ${{ action.arguments }}
                                  scriptTask: ${{ coalesce(action.scriptTask, actionGroup.scriptTask, 'pwsh') }}
                                  azurePowerShellVersion: ${{ coalesce(action.azurePowerShellVersion, actionGroup.azurePowerShellVersion, 'LatestVersion') }}
                                  workingDirectory: ${{ action.workingDirectory }}
                                  workingDirectoryFullPath: ${{ action.workingDirectoryFullPath }}
                                  variableRoot: ${{ parameters.variableRoot }}
                                  environmentName: ""
                                  region: ""
                                  useLockedSources: true
                                  lockedArtifactName: source-snapshot
                                  lockedSourcePath: $(Pipeline.Workspace)/locked-sources
                                  tokenReplaceEnabled: ${{ coalesce(action.tokenReplaceEnabled, actionGroup.tokenReplaceEnabled, true) }}
                                  tokenTargetPatterns: ${{ coalesce(action.tokenTargetPatterns, actionGroup.tokenTargetPatterns, createArray()) }}
                                  tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                  tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}
                                  additionalRepositories: ${{ parameters.additionalRepositories }}
                                  keyVault: ${{ parameters.keyVault }}
                                  serviceConnection: ${{ coalesce(action.serviceConnection, actionGroup.serviceConnection, variables[parameters.serviceConnection], parameters.serviceConnection) }}
