parameters:
  - name: actionGroups
    type: object
    default: []
  - name: serviceConnection
    type: string
    default: ""
  - name: environments
    type: object
    default: []
  - name: pool
    type: object
    default: {}
  - name: variableRoot
    type: string
    default: "vars"
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: validation
    type: object
    default: {}
  - name: customValidationScripts
    type: object
    default: []
  - name: additionalRepositories
    type: object
    default: []
  - name: keyVault
    type: object
    default: {}
  - name: enableProduction
    type: boolean
    default: false

stages:
  - stage: validation
    displayName: Validation
    ${{ if ne(coalesce(parameters.pool.name, ''), '') }}:
      pool:
        name: ${{ parameters.pool.name }}
    ${{ elseif ne(coalesce(parameters.pool.vmImage, ''), '') }}:
      pool:
        vmImage: ${{ parameters.pool.vmImage }}
    variables:
      - template: ../variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
    jobs:
      - template: ../jobs/validation/validate-settings.yml@PipelineCommon
        parameters:
          environments: ${{ parameters.environments }}
          dependsOnStages: []
          additionalRepositories: ${{ parameters.additionalRepositories }}
          enableProduction: ${{ parameters.enableProduction }}

      - ${{ if ne(coalesce(parameters.validation.enableBranchAllowlist, true), false) }}:
          - template: ../jobs/validation/validate-branch-allowlist.yml@PipelineCommon
            parameters:
              environments: ${{ parameters.environments }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              enableProduction: ${{ parameters.enableProduction }}

      - ${{ if ne(coalesce(parameters.validation.enableVariableIncludes, true), false) }}:
          - template: ../jobs/validation/validate-variable-includes.yml@PipelineCommon
            parameters:
              environments: ${{ parameters.environments }}
              variableRoot: ${{ parameters.variableRoot }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}

      - ${{ if ne(coalesce(parameters.validation.enableTokenTargets, true), false) }}:
          - template: ../jobs/validation/validate-token-targets.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if contains(join(format('{0}', parameters.actionGroups), ''), 'type=bicep') }}:
          - template: ../jobs/validation/validate-bicep.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if contains(join(format('{0}', parameters.actionGroups), ''), 'type=terraform') }}:
          - template: ../jobs/validation/validate-terraform.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if contains(join(format('{0}', parameters.actionGroups), ''), 'type=powershell') }}:
          - template: ../jobs/validation/validate-powershell.yml@PipelineCommon
            parameters:
              actionGroups: ${{ parameters.actionGroups }}
              dependsOnStages: []
              additionalRepositories: ${{ parameters.additionalRepositories }}
              keyVault: ${{ parameters.keyVault }}
              serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}

      - ${{ if gt(length(parameters.customValidationScripts), 0) }}:
          - job: Custom_Validation
            displayName: Custom Validation Scripts
            steps:
              - checkout: PipelineCommon
              - template: ../steps/download-artifact.yml@PipelineCommon
                parameters:
                  displayName: Download source snapshot
                  artifactName: source-snapshot
                  downloadPath: $(Pipeline.Workspace)/locked-sources
              - ${{ each script in parameters.customValidationScripts }}:
                  - template: ../steps/powershell.yml@PipelineCommon
                    parameters:
                      displayName: Custom Validation
                      scriptFullPath: $(Pipeline.Workspace)/locked-sources/${{ script.path }}
                      arguments: ${{ script.arguments }}

      # Invoke PowerShell actions in Validation when requested
      - ${{ each actionGroup in parameters.actionGroups }}:
          - ${{ if and(eq(actionGroup.type, 'powershell'), ne(coalesce(actionGroup.actions, ''), '')) }}:
              - ${{ each action in actionGroup.actions }}:
                  - ${{ if eq(coalesce(action.runInValidation, false), true) }}:
                      - template: ../jobs/run-powershell.yml@PipelineCommon
                        parameters:
                          name: ${{ coalesce(action.name, 'ps') }}_validation
                          displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))) }} (Validation)
                          scriptPath: ${{ action.scriptPath }}
                          scriptFullPath: ""
                          arguments: ${{ action.arguments }}
                          variableRoot: ${{ parameters.variableRoot }}
                          environmentName: ""
                          region: ""
                          useLockedSources: true
                          lockedArtifactName: source-snapshot
                          lockedSourcePath: $(Pipeline.Workspace)/locked-sources
                          tokenReplaceEnabled: ${{ coalesce(action.tokenReplaceEnabled, true) }}
                          tokenTargetPatterns: ${{ action.tokenTargetPatterns }}
                          tokenPrefix: ${{ coalesce(action.tokenPrefix, '#{') }}
                          tokenSuffix: ${{ coalesce(action.tokenSuffix, '}') }}
                          delayMinutes: ${{ coalesce(action.delayMinutes, 0) }}
                          additionalRepositories: ${{ parameters.additionalRepositories }}
                          keyVault: ${{ parameters.keyVault }}
                          serviceConnection: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
