parameters:
  - name: environmentName
    type: string
  - name: regionName
    type: string
    default: ""
  - name: envClass
    type: string
    default: ""
  - name: enableProduction
    type: boolean
    default: false
  - name: variableRoot
    type: string
    default: "vars"
  - name: allowedBranches
    type: object
    default: []
  - name: actionGroups
    type: object
    default: []
  - name: pool
    type: object
    default: {}
  - name: serviceConnection
    type: string
    default: ""
  - name: dependsOnStages
    type: object
    default: []
  - name: bicepModeOverride
    type: string
    default: ""
  - name: additionalRepositories
    type: object
    default: []
  - name: keyVault
    type: object
    default: {}
  - name: poolRegionDemand
    type: boolean
    default: false
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: variableIncludeEnv
    type: boolean
    default: true
  - name: variableIncludeEnvRegion
    type: boolean
    default: true
  - name: variableIncludeRegionOnly
    type: boolean
    default: true

stages:
  - stage: deploy_${{ parameters.environmentName }}_${{ parameters.regionName }}
    displayName: "Deploy - ${{ upper(parameters.environmentName) }} - ${{ upper(parameters.regionName) }}"
    ${{ if and(eq(parameters.envClass, 'production'), eq(parameters.enableProduction, false)) }}:
      condition: and(succeeded(), false)
    ${{ if gt(length(coalesce(parameters.dependsOnStages, '')), 0) }}:
      dependsOn: ${{ parameters.dependsOnStages }}
    ${{ if ne(coalesce(parameters.pool.name, ''), '') }}:
      pool:
        name: ${{ parameters.pool.name }}
        ${{ if eq(coalesce(parameters.poolRegionDemand, false), true) }}:
          demands:
            - region -equals ${{ parameters.regionName }}
    ${{ elseif ne(coalesce(parameters.pool.vmImage, ''), '') }}:
      pool:
        vmImage: ${{ parameters.pool.vmImage }}
    variables:
      - template: ../variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          environmentName: ${{ parameters.environmentName }}
          regionName: ${{ parameters.regionName }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
          includeRegionOnly: ${{ parameters.variableIncludeRegionOnly }}
          includeEnv: ${{ parameters.variableIncludeEnv }}
          includeEnvRegion: ${{ parameters.variableIncludeEnvRegion }}
    jobs:
      - ${{ each actionGroup in parameters.actionGroups }}:
          - ${{ if and(ne(actionGroup.enabled, false), or(contains(actionGroup.environments, parameters.environmentName), eq(coalesce(actionGroup.environments, ''), ''))) }}:
              - deployment: deploy_${{ parameters.environmentName }}_${{ parameters.regionName }}_${{ coalesce(actionGroup.name, 'actionGroup') }}
                displayName: "${{ coalesce(actionGroup.displayName, upper(replace(coalesce(actionGroup.name, 'ACTION GROUP'), '_', ' '))) }}"
                environment: ${{ upper(parameters.environmentName) }}
                ${{ if ne(coalesce(actionGroup.dependsOn, ''), '') }}:
                  dependsOn:
                    - ${{ each dependency in actionGroup.dependsOn }}:
                        - ${{ format('deploy_{0}_{1}_{2}', parameters.environmentName, parameters.regionName, dependency) }}
                ${{ if ne(actionGroup.condition, '') }}:
                  condition: ${{ actionGroup.condition }}
                ${{ if and(eq(actionGroup.condition, ''), eq(coalesce(actionGroup.runConditions.manualOnly, false), true)) }}:
                  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                ${{ if and(eq(actionGroup.condition, ''), ne(coalesce(actionGroup.runConditions.manualOnly, false), true), eq(coalesce(actionGroup.runConditions.scheduleOnly, false), true)) }}:
                  condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                ${{ if and(eq(actionGroup.condition, ''), ne(coalesce(actionGroup.runConditions.manualOnly, false), true), ne(coalesce(actionGroup.runConditions.scheduleOnly, false), true), eq(coalesce(actionGroup.runConditions.prOnly, false), true)) }}:
                  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - checkout: self
                          path: s/self
                        - checkout: PipelineCommon
                          path: s/PipelineCommon

                        # Optional checkout additional repositories
                        - ${{ if ne(coalesce(parameters.additionalRepositories, ''), '') }}:
                            - ${{ each repo in parameters.additionalRepositories }}:
                                - checkout: ${{ repo.alias }}

                        # Download Artifact of source code
                        - template: ../steps/download-artifact.yml@PipelineCommon
                          parameters:
                            displayName: Download source snapshot
                            artifactName: source-snapshot
                            downloadPath: $(Pipeline.Workspace)/locked-sources

                        # Optional Key Vault secret import
                        - ${{ if ne(coalesce(parameters.keyVault.name, ''), '') }}:
                            - template: ../steps/import-keyvault-secrets.yml@PipelineCommon
                              parameters:
                                displayName: Import Key Vault Secrets
                                azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                                keyVaultName: ${{ parameters.keyVault.name }}
                                secretsFilter: ${{ coalesce(parameters.keyVault.secretsFilter, '*') }}

                        # Optional Pre Deployment Scripts
                        - ${{ if ne(coalesce(actionGroup.preDeploy.scripts, ''), '') }}:
                            - ${{ each script in actionGroup.preDeploy.scripts }}:
                                - template: ../steps/powershell.yml@PipelineCommon
                                  parameters:
                                    displayName: Pre-Deploy (script)
                                    scriptFullPath: $(Pipeline.Workspace)/locked-sources/${{ script.script }}
                                    arguments: ${{ script.arguments }}

                        # Optional token replacement at action group level
                        - ${{ if eq(coalesce(actionGroup.tokenReplaceEnabled, false), true) }}:
                            # Terraform action group
                            - ${{ if eq(actionGroup.type, 'terraform') }}:
                                - ${{ if ne(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each tokenPattern in actionGroup.tokenTargetPatterns }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: Terraform token replacement (${ tokenPattern })
                                            targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}
                                - ${{ if eq(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each terraformAction in actionGroup.actions }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: Terraform token replacement (${ coalesce(terraformAction.name, terraformAction.workingDirectory) })
                                            targetFiles: $(Pipeline.Workspace)/locked-sources/${{ terraformAction.workingDirectory }}/**/*.tfvars
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}
                            # Bicep action group
                            - ${{ if eq(actionGroup.type, 'bicep') }}:
                                - ${{ if ne(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each tokenPattern in actionGroup.tokenTargetPatterns }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: Bicep token replacement (${ tokenPattern })
                                            targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}
                                - ${{ if eq(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - template: ../steps/replace-tokens.yml@PipelineCommon
                                      parameters:
                                        displayName: Bicep token replacement (group default)
                                        targetFiles: $(Pipeline.Workspace)/locked-sources/**/*.bicepparam
                                        tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                        tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}
                            # PowerShell action group
                            - ${{ if eq(actionGroup.type, 'powershell') }}:
                                - ${{ if ne(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each tokenPattern in actionGroup.tokenTargetPatterns }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: PowerShell token replacement (${ tokenPattern })
                                            targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}

                        # Mandatory Action per Action Group
                        - ${{ each action in actionGroup.actions }}:
                            # Terraform Action
                            - ${{ if eq(actionGroup.type, 'terraform') }}:
                                # Replace Tokens
                                - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                                  - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                      - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                                          - template: ../steps/replace-tokens.yml@PipelineCommon
                                            parameters:
                                              displayName: Terraform token replacement (${ tokenPattern })
                                              targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
                                              tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                              tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}
                                  - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                      - template: ../steps/replace-tokens.yml@PipelineCommon
                                        parameters:
                                          displayName: Terraform token replacement
                                          targetFiles: $(Pipeline.Workspace)/locked-sources/${{ action.workingDirectory }}/**/*.tfvars
                                          tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                          tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}

                                # Execute Terraform
                                - template: ../steps/azurecli.yml@PipelineCommon
                                  parameters:
                                    displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'TERRAFORM'), '_', ' '))) }}
                                    azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                                    repoAlias: PipelineCommon
                                    script: terraform_run.ps1
                                    arguments: >-
                                      -Action "apply"
                                      -WorkDir "$(Pipeline.Workspace)/locked-sources/${{ action.workingDirectory }}"
                                      -EnvironmentName "${{ parameters.environmentName }}"
                                      -VarFilesString "${{ coalesce(action.varFilesString, '') }}"
                                    ${{ if ne(action.condition, '') }}:
                                      condition: ${{ action.condition }}
                                    ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                                    ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                                    ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

                            # Bicep Action
                            - ${{ if eq(actionGroup.type, 'bicep') }}:
                                # Replace Tokens
                                - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                                  - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                      - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                                          - template: ../steps/replace-tokens.yml@PipelineCommon
                                            parameters:
                                              displayName: Bicep token replacement (${ tokenPattern })
                                              targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
                                              tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                              tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}
                                  - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                      - ${{ if ne(coalesce(action.parametersFile, ''), '') }}:
                                          - template: ../steps/replace-tokens.yml@PipelineCommon
                                            parameters:
                                              displayName: Bicep token replacement (${{ action.parametersFile }})
                                              targetFiles: $(Pipeline.Workspace)/locked-sources/${{ action.parametersFile }}
                                              tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                              tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}

                                # Execute Bicep
                                - template: ../steps/azurecli.yml@PipelineCommon
                                  parameters:
                                    displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'BICEP'), '_', ' '))) }}
                                    azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                                    repoAlias: PipelineCommon
                                    script: bicep_run.ps1
                                    arguments: >-
                                      -Action "deploy"
                                      -Scope "${{ action.scope }}"
                                      -ResourceGroupName "${{ action.resourceGroupName }}"
                                      -Location "${{ action.location }}"
                                      -Template "$(Pipeline.Workspace)/locked-sources/${{ action.templatePath }}"
                                      -ParametersRoot "$(Pipeline.Workspace)/locked-sources"
                                      -ParametersFile "${{ action.parametersFile }}"
                                      -AdditionalParameters "${{ action.additionalParameters }}"
                                      -ManagementGroupId "${{ action.managementGroupId }}"
                                      -SubscriptionId "${{ action.subscriptionId }}"
                                      -ModeOverride "${{ parameters.bicepModeOverride }}"
                                      -Mode "${{ coalesce(replace(replace(format('{0}', eq(coalesce(action.allowDeleteOnUnmanage, false), true)), 'True', 'complete'), 'False', ''), coalesce(action.mode, 'incremental')) }}"
                                      -AllowDeleteOnUnmanage ${{ format('{0}', eq(coalesce(action.allowDeleteOnUnmanage, false), true)) }}
                                    ${{ if ne(action.condition, '') }}:
                                      condition: ${{ action.condition }}
                                    ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                                    ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                                    ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

                            # PowerShell Action
                            - ${{ if eq(actionGroup.type, 'powershell') }}:
                                # Optional Delay
                                - ${{ if gt(coalesce(action.delayMinutes, 0), 0) }}:
                                    - task: Delay@1
                                      inputs:
                                        delayForMinutes: ${{ action.delayMinutes }}

                                # Optional Replace Tokens
                                - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                                  - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                      - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                                          - template: ../steps/replace-tokens.yml@PipelineCommon
                                            parameters:
                                              displayName: PowerShell token replacement (${ tokenPattern })
                                              targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
                                              tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                              tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}

                                # Execute PowerShell
                                - template: ../steps/powershell.yml@PipelineCommon
                                  parameters:
                                    displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))) }}
                                    scriptFullPath: $(Pipeline.Workspace)/locked-sources/${{ action.scriptPath }}
                                    arguments: ${{ action.arguments }}
                                    ${{ if ne(action.condition, '') }}:
                                      condition: ${{ action.condition }}
                                    ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                                    ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                                    ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
                                      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

                        # Optional Post Deployment Scripts
                        - ${{ if ne(coalesce(actionGroup.postDeploy.scripts, ''), '') }}:
                            - ${{ each script in actionGroup.postDeploy.scripts }}:
                                - template: ../steps/powershell.yml@PipelineCommon
                                  parameters:
                                    displayName: Post-Deploy (script)
                                    scriptFullPath: $(Pipeline.Workspace)/locked-sources/${{ script.script }}
                                    arguments: ${{ script.arguments }}
