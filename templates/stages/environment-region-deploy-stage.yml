parameters:
  - name: environmentName
    type: string
  - name: regionName
    type: string
    default: ""
  - name: envClass
    type: string
    default: ""
  - name: enableProduction
    type: boolean
    default: false
  - name: variableRoot
    type: string
    default: "vars"
  - name: allowedBranches
    type: object
    default: []
  - name: actionGroups
    type: object
    default: []
  - name: pool
    type: object
    default: {}
  - name: serviceConnection
    type: string
    default: ""
  - name: dependsOnStages
    type: object
    default: []
  - name: bicepModeOverride
    type: string
    default: ""
  - name: additionalRepositories
    type: object
    default: []
  - name: keyVault
    type: object
    default: {}
  - name: poolRegionDemand
    type: boolean
    default: false
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: variableIncludeEnv
    type: boolean
    default: true
  - name: variableIncludeEnvRegion
    type: boolean
    default: true
  - name: variableincludeRegion
    type: boolean
    default: true
  - name: sourcePath
    type: string
    default: $(Pipeline.Workspace)/s/self
  - name: useLockedSources
    type: boolean
    default: true
  - name: environmentSuffix
    type: string
    default: ""

stages:
  - stage: deploy_${{ parameters.environmentName }}_${{ parameters.regionName }}
    displayName: "${{ upper(parameters.environmentName) }} - ${{ upper(parameters.regionName) }}"
    ${{ if and(eq(parameters.envClass, 'production'), eq(parameters.enableProduction, false)) }}:
      condition: and(succeeded(), false)
    ${{ if gt(length(coalesce(parameters.dependsOnStages, '')), 0) }}:
      dependsOn: ${{ parameters.dependsOnStages }}
    ${{ if ne(coalesce(parameters.pool.name, ''), '') }}:
      pool:
        name: ${{ parameters.pool.name }}
        ${{ if eq(coalesce(parameters.poolRegionDemand, false), true) }}:
          demands:
            - region -equals ${{ parameters.regionName }}
    ${{ elseif ne(coalesce(parameters.pool.vmImage, ''), '') }}:
      pool:
        vmImage: ${{ parameters.pool.vmImage }}
    variables:
      - template: ../variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          environmentName: ${{ parameters.environmentName }}
          regionName: ${{ parameters.regionName }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
          includeRegion: ${{ parameters.variableincludeRegion }}
          includeEnv: ${{ parameters.variableIncludeEnv }}
          includeEnvRegion: ${{ parameters.variableIncludeEnvRegion }}
    jobs:
      - ${{ each actionGroup in parameters.actionGroups }}:
          - ${{ if and(ne(actionGroup.enabled, false), or(eq(actionGroup.environments, ''), eq(actionGroup.environments, ''), and(ne(actionGroup.environments, ''), ne(actionGroup.environments, ''), containsValue(actionGroup.environments, parameters.environmentName)))) }}:
              - ${{ if ne(coalesce(actionGroup.delayMinutes, 0), 0) }}:
                  - job: ${{ format('delay_deploy_{0}_{1}_{2}', parameters.environmentName, parameters.regionName, coalesce(actionGroup.name, 'actionGroup')) }}
                    displayName: Delay before ${{ coalesce(actionGroup.displayName, upper(replace(coalesce(actionGroup.name, 'ACTION GROUP'), '_', ' '))) }}
                    pool: server
                    steps:
                      - task: Delay@1
                        inputs:
                          delayForMinutes: ${{ coalesce(actionGroup.delayMinutes, 0) }}

              - deployment: deploy_${{ parameters.environmentName }}_${{ parameters.regionName }}_${{ coalesce(actionGroup.name, 'actionGroup') }}
                displayName: "${{ coalesce(actionGroup.displayName, upper(replace(coalesce(actionGroup.name, 'ACTION GROUP'), '_', ' '))) }}"
                ${{ if eq(coalesce(actionGroup.variableOverridesEnabled, false), true) }}:
                  variables:
                    - template: ../variables/include-overrides.yml@PipelineCommon
                      parameters:
                        baseDeploymentVersion: ${{ variables.deploymentVersion }}
                        suffixToken: ${{ coalesce(actionGroup.testsDeploymentSuffixToken, coalesce(actionGroup.name, 'actionGroup')) }}
                        variableOverrides: ${{ actionGroup.variableOverrides }}
                ${{ if parameters.environmentSuffix }}:
                  environment: ${{ upper(parameters.environmentName) }}-${{ upper(parameters.environmentSuffix) }}
                ${{ else }}:
                  environment: ${{ upper(parameters.environmentName) }}
                ${{ if or(ne(coalesce(actionGroup.dependsOn, ''), ''), ne(coalesce(actionGroup.delayMinutes, 0), 0)) }}:
                  dependsOn:
                    - ${{ if ne(coalesce(actionGroup.dependsOn, ''), '') }}:
                        - ${{ each dependency in actionGroup.dependsOn }}:
                            - ${{ format('deploy_{0}_{1}_{2}', parameters.environmentName, parameters.regionName, dependency) }}
                    - ${{ if ne(coalesce(actionGroup.delayMinutes, 0), 0) }}:
                        - ${{ format('delay_deploy_{0}_{1}_{2}', parameters.environmentName, parameters.regionName, coalesce(actionGroup.name, 'actionGroup')) }}
                ${{ if ne(actionGroup.condition, '') }}:
                  condition: and(succeeded(), or(eq(variables['Build.Reason'], 'Manual'), ${{ actionGroup.condition }} ))
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - ${{ if eq(coalesce(actionGroup.useLockedSources, parameters.useLockedSources, true), false) }}:
                            - checkout: self
                              path: s/self
                        - checkout: PipelineCommon
                          path: s/PipelineCommon

                        # Optional checkout additional repositories
                        - ${{ if ne(coalesce(parameters.additionalRepositories, ''), '') }}:
                            - ${{ each repo in parameters.additionalRepositories }}:
                                - checkout: ${{ repo.alias }}

                        # Download Artifact of source code
                        - ${{ if eq(coalesce(actionGroup.useLockedSources, parameters.useLockedSources, true), true) }}:
                            - template: ../steps/download-artifact.yml@PipelineCommon
                              parameters:
                                displayName: Download source snapshot
                                artifactName: source-snapshot
                                downloadPath: ${{ parameters.sourcePath }}

                        # Optional Key Vault secret import
                        - ${{ if ne(coalesce(parameters.keyVault.name, ''), '') }}:
                            - template: ../steps/import-keyvault-secrets.yml@PipelineCommon
                              parameters:
                                displayName: Import Key Vault Secrets
                                azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                                keyVaultName: ${{ parameters.keyVault.name }}
                                secretsFilter: ${{ coalesce(parameters.keyVault.secretsFilter, '*') }}

                        # Optional Pre Deployment Scripts
                        - ${{ if ne(coalesce(actionGroup.preDeploy.scripts, ''), '') }}:
                            - ${{ each script in actionGroup.preDeploy.scripts }}:
                                - template: ../steps/powershell.yml@PipelineCommon
                                  parameters:
                                    displayName: Pre-Deploy (script)
                                    scriptFullPath: ${{ format('{0}/{1}', parameters.sourcePath, script.script) }}
                                    arguments: ${{ script.arguments }}
                                    ${{ if ne(coalesce(script.workingDirectory, ''), '') }}:
                                      workingDirectory: ${{ format('{0}/{1}', parameters.sourcePath, script.workingDirectory) }}
                                    ${{ if and(eq(coalesce(script.workingDirectory, ''), ''), ne(coalesce(script.workingDirectoryFullPath, ''), '')) }}:
                                      workingDirectory: ${{ script.workingDirectoryFullPath }}
                                    ${{ if and(eq(coalesce(script.workingDirectory, ''), ''), eq(coalesce(script.workingDirectoryFullPath, ''), '')) }}:
                                      workingDirectory: ${{ parameters.sourcePath }}

                        # Optional token replacement at action group level
                        - ${{ if eq(coalesce(actionGroup.tokenReplaceEnabled, false), true) }}:
                            # Terraform action group
                            - ${{ if eq(actionGroup.type, 'terraform') }}:
                                - ${{ if ne(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each tokenPattern in actionGroup.tokenTargetPatterns }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: Terraform token replacement (${{ tokenPattern }})
                                            targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}
                                - ${{ if eq(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each terraformAction in actionGroup.actions }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: Terraform token replacement (${ coalesce(terraformAction.name, terraformAction.workingDirectory) })
                                            targetFiles: ${{ format('{0}/{1}/**/*.tfvars', parameters.sourcePath, terraformAction.workingDirectory) }}
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}

                            # Bicep action group
                            - ${{ if eq(actionGroup.type, 'bicep') }}:
                                - ${{ if ne(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each tokenPattern in actionGroup.tokenTargetPatterns }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: Bicep token replacement (${{ tokenPattern }})
                                            targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}
                                - ${{ if eq(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - template: ../steps/replace-tokens.yml@PipelineCommon
                                      parameters:
                                        displayName: Bicep token replacement (group default)
                                        targetFiles: ${{ format('{0}/**/*.bicepparam', parameters.sourcePath) }}
                                        tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                        tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}

                            # PowerShell action group
                            - ${{ if eq(actionGroup.type, 'powershell') }}:
                                - ${{ if ne(coalesce(actionGroup.tokenTargetPatterns, ''), '') }}:
                                    - ${{ each tokenPattern in actionGroup.tokenTargetPatterns }}:
                                        - template: ../steps/replace-tokens.yml@PipelineCommon
                                          parameters:
                                            displayName: PowerShell token replacement (${{ tokenPattern }})
                                            targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                            tokenPrefix: ${{ coalesce(actionGroup.tokenPrefix, '#{{') }}
                                            tokenSuffix: ${{ coalesce(actionGroup.tokenSuffix, '}}') }}

                        # Mandatory Action per Action Group
                        - ${{ each action in actionGroup.actions }}:
                            - ${{ if ne(action.enabled, false) }}:
                                # Terraform Action
                                - ${{ if eq(actionGroup.type, 'terraform') }}:
                                    # Optional Replace Tokens
                                    - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                                        - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                            - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                                                - template: ../steps/replace-tokens.yml@PipelineCommon
                                                  parameters:
                                                    displayName: Terraform token replacement (${{ tokenPattern }})
                                                    targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                                    tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                                    tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}
                                        - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                            - template: ../steps/replace-tokens.yml@PipelineCommon
                                              parameters:
                                                displayName: Terraform token replacement
                                                targetFiles: ${{ format('{0}/{1}/**/*.tfvars', parameters.sourcePath, action.workingDirectory) }}
                                                tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                                tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}

                                    # Execute Terraform
                                    - template: ../steps/azurecli.yml@PipelineCommon
                                      parameters:
                                        displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'TERRAFORM'), '_', ' '))) }}
                                        azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                                        repoAlias: PipelineCommon
                                        script: terraform_run.ps1
                                        arguments: >-
                                          -Action "apply"
                                          -WorkDir "${{ format('{0}/{1}', parameters.sourcePath, action.workingDirectory) }}"
                                          -EnvironmentName "${{ parameters.environmentName }}"
                                          -VarFilesString "${{ coalesce(action.varFilesString, '') }}"
                                        ${{ if ne(action.condition, '') }}:
                                          condition: and(succeeded(), or(eq(variables['Build.Reason'], 'Manual'), ${{ action.condition }} ))

                                # Bicep Action
                                - ${{ if eq(actionGroup.type, 'bicep') }}:
                                    # Optional Replace Tokens
                                    - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                                        - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                            - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                                                - template: ../steps/replace-tokens.yml@PipelineCommon
                                                  parameters:
                                                    displayName: Bicep token replacement (${{ tokenPattern }})
                                                    targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                                    tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                                    tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}
                                        - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                            - ${{ if ne(coalesce(action.parametersPath, ''), '') }}:
                                                - template: ../steps/replace-tokens.yml@PipelineCommon
                                                  parameters:
                                                    displayName: Bicep token replacement (${{ action.parametersPath }})
                                                    targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, action.parametersPath) }}
                                                    tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                                    tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}

                                    # Execute Bicep
                                    - template: ../steps/azurecli.yml@PipelineCommon
                                      parameters:
                                        displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'BICEP'), '_', ' '))) }}
                                        azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                                        repoAlias: PipelineCommon
                                        script: bicep_run.ps1
                                        arguments: >-
                                          -Action "deploy"
                                          -Name "${{ action.name }}"
                                          -Scope "${{ action.scope }}"
                                          -ResourceGroupName "${{ action.resourceGroupName }}"
                                          -Location "${{ action.location }}"
                                          -Template "${{ format('{0}/{1}', parameters.sourcePath, action.templatePath) }}"
                                          -ParametersPath "${{ format('{0}/{1}', parameters.sourcePath, action.parametersPath) }}"
                                          -AdditionalParameters "${{ action.additionalParameters }}"
                                          -ManagementGroupId "${{ action.managementGroupId }}"
                                          -SubscriptionId "${{ action.subscriptionId }}"
                                          -ModeOverride "${{ parameters.bicepModeOverride }}"
                                          -Mode "${{ coalesce(replace(replace(format('{0}', eq(coalesce(action.allowDeleteOnUnmanage, false), true)), 'True', 'complete'), 'False', ''), coalesce(action.mode, 'incremental')) }}"
                                          -AllowDeleteOnUnmanage ${{ format('{0}', eq(coalesce(action.allowDeleteOnUnmanage, false), true)) }}
                                          -CleanupStack ${{ format('{0}', eq(coalesce(action.cleanupStack, false), true)) }}
                                        ${{ if ne(action.condition, '') }}:
                                          condition: and(succeeded(), or(eq(variables['Build.Reason'], 'Manual'), ${{ action.condition }} ))

                                # PowerShell Action
                                - ${{ if eq(actionGroup.type, 'powershell') }}:
                                    # Optional Replace Tokens
                                    - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                                        - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                                            - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                                                - template: ../steps/replace-tokens.yml@PipelineCommon
                                                  parameters:
                                                    displayName: PowerShell token replacement (${{ tokenPattern }})
                                                    targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                                    tokenPrefix: ${{ coalesce(action.tokenPrefix, actionGroup.tokenPrefix, '#{{') }}
                                                    tokenSuffix: ${{ coalesce(action.tokenSuffix, actionGroup.tokenSuffix, '}}') }}

                                    # Execute PowerShell
                                    - template: ../steps/powershell.yml@PipelineCommon
                                      parameters:
                                        displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))) }}
                                        scriptFullPath: ${{ format('{0}/{1}', parameters.sourcePath, action.scriptPath) }}
                                        arguments: ${{ action.arguments }}
                                        scriptTask: ${{ coalesce(action.scriptTask, actionGroup.scriptTask, 'pwsh') }}
                                        ${{ if ne(coalesce(action.serviceConnection, actionGroup.serviceConnection, variables[parameters.serviceConnection], parameters.serviceConnection), '') }}:
                                          azureSubscription: ${{ coalesce(action.serviceConnection, actionGroup.serviceConnection, variables[parameters.serviceConnection], parameters.serviceConnection) }}
                                        ${{ if ne(coalesce(action.azurePowerShellVersion, actionGroup.azurePowerShellVersion, ''), '') }}:
                                          azurePowerShellVersion: ${{ coalesce(action.azurePowerShellVersion, actionGroup.azurePowerShellVersion) }}
                                        addSpnToEnvironment: ${{ eq(lower(coalesce(action.scriptTask, actionGroup.scriptTask, 'pwsh')), 'azurecli') }}
                                        ${{ if ne(coalesce(action.workingDirectory, ''), '') }}:
                                          workingDirectory: ${{ format('{0}/{1}', parameters.sourcePath, action.workingDirectory) }}
                                        ${{ if and(eq(coalesce(action.workingDirectory, ''), ''), ne(coalesce(action.workingDirectoryFullPath, ''), '')) }}:
                                          workingDirectory: ${{ action.workingDirectoryFullPath }}
                                        ${{ if and(eq(coalesce(action.workingDirectory, ''), ''), eq(coalesce(action.workingDirectoryFullPath, ''), '')) }}:
                                          workingDirectory: ${{ parameters.sourcePath }}
                                        ${{ if ne(action.condition, '') }}:
                                          condition: and(succeeded(), or(eq(variables['Build.Reason'], 'Manual'), ${{ action.condition }}))

                                    # Optional PowerShell test publishing
                                    - ${{ if eq(coalesce(action.kind, actionGroup.kind, ''), 'pester') }}:
                                        - template: ../steps/publish-test-results.yml@PipelineCommon
                                          parameters:
                                            displayName: ${{ coalesce(action.publishDisplayName, format('Publish {0} results', coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))))) }}
                                            testResultsFiles: ${{ format('{0}/{1}', parameters.sourcePath, coalesce(action.testResultsFiles, format('TestResults/{0}_{1}.xml', coalesce(actionGroup.name, actionGroup.displayName, format('actiongroup_{0}_{1}', parameters.environmentName, parameters.regionName)), coalesce(action.name, 'action')))) }}
                                            testResultsFormat: ${{ coalesce(action.testResultsFormat, 'NUnit') }}
                                            testRunTitle: ${{ coalesce(action.testRunTitle, format('{0} {1} ({2})', coalesce(actionGroup.displayName, upper(replace(coalesce(actionGroup.name, 'ACTION GROUP'), '_', ' '))), coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))), upper(replace(parameters.regionName, ' ', '-')))) }}
                                            ${{ if ne(action.condition, '') }}:
                                              condition: and(succeededOrFailed(), or(eq(variables['Build.Reason'], 'Manual'), ${{ action.condition }}))
                                        - ${{ if eq(coalesce(variables.publishTestArtifacts, false), true) }}:
                                            - template: ../steps/publish-artifact.yml@PipelineCommon
                                              parameters:
                                                displayName: ${{ coalesce(action.publishDisplayName, format('Publish {0} artifacts', coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))))) }}
                                                targetPath: $(Build.ArtifactStagingDirectory)
                                                artifactName: ${{ coalesce(action.publishArtifactName, format('{0}-{1}-{2}', coalesce(actionGroup.name, actionGroup.displayName, format('actiongroup_{0}_{1}', parameters.environmentName, parameters.regionName)), coalesce(action.name, 'action'), upper(replace(parameters.regionName, ' ', '-')))) }}
                                                ${{ if ne(action.condition, '') }}:
                                                  condition: and(succeededOrFailed(), or(eq(variables['Build.Reason'], 'Manual'), ${{ action.condition }}))

                        # Optional Post Deployment Scripts
                        - ${{ if ne(coalesce(actionGroup.postDeploy.scripts, ''), '') }}:
                            - ${{ each script in actionGroup.postDeploy.scripts }}:
                                - template: ../steps/powershell.yml@PipelineCommon
                                  parameters:
                                    displayName: Post-Deploy (script)
                                    scriptFullPath: ${{ format('{0}/{1}', parameters.sourcePath, script.script) }}
                                    arguments: ${{ script.arguments }}
                                    ${{ if ne(coalesce(script.workingDirectory, ''), '') }}:
                                      workingDirectory: ${{ format('{0}/{1}', parameters.sourcePath, script.workingDirectory) }}
                                    ${{ if and(eq(coalesce(script.workingDirectory, ''), ''), ne(coalesce(script.workingDirectoryFullPath, ''), '')) }}:
                                      workingDirectory: ${{ script.workingDirectoryFullPath }}
                                    ${{ if and(eq(coalesce(script.workingDirectory, ''), ''), eq(coalesce(script.workingDirectoryFullPath, ''), '')) }}:
                                      workingDirectory: ${{ parameters.sourcePath }}
