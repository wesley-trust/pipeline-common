# Deploy Bicep â€“ supports validate, what-if and deploy. Publishes what-if output when requested.
parameters:
  - name: name
    type: string
    default: bicep
  - name: displayName
    type: string
    default: Bicep
  - name: action
    type: string
    default: whatif # whatif|deploy
  - name: publishWhatIf
    type: boolean
    default: false
  - name: environmentName
    type: string
    default: ""
  - name: region
    type: string
    default: ""
  - name: variableRoot
    type: string
    default: "vars"
  - name: scope
    type: string
    default: "resourceGroup"
  - name: resourceGroupName
    type: string
    default: ""
  - name: location
    type: string
    default: ""
  - name: templatePath
    type: string
    default: ""
  - name: parametersFile
    type: string
    default: ""
  - name: additionalParameters
    type: string
    default: ""
  - name: managementGroupId
    type: string
    default: ""
  - name: subscriptionId
    type: string
    default: ""
  - name: serviceConnection
    type: string
    default: ""
  - name: dependsOn
    type: object
    default: []
  - name: useLockedSources
    type: boolean
    default: true
  - name: lockedArtifactName
    type: string
    default: source-snapshot
  - name: lockedSourcePath
    type: string
    default: $(Pipeline.Workspace)/locked-sources
  - name: tokenReplaceEnabled
    type: boolean
    default: true
  - name: tokenTargetPatterns
    type: object
    default: []
  - name: tokenPrefix
    type: string
    default: "#{"
  - name: tokenSuffix
    type: string
    default: "}"
  - name: mode
    type: string
    default: "" # complete|incremental; empty to use default or runtime override
  - name: pool
    type: object
    default: {}
  - name: demands
    type: object
    default: []
  - name: additionalRepositories
    type: object
    default: []
  - name: keyVault
    type: object
    default: {}
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: variableIncludeEnv
    type: boolean
    default: true
  - name: variableIncludeEnvRegion
    type: boolean
    default: true
  - name: variableIncludeRegionOnly
    type: boolean
    default: true

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ coalesce(parameters.displayName, upper(replace(parameters.name, '_', ' '))) }}
    dependsOn: ${{ parameters.dependsOn }}
    variables:
      - template: variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          environmentName: ${{ parameters.environmentName }}
          regionName: ${{ parameters.region }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
          includeRegionOnly: ${{ parameters.variableIncludeRegionOnly }}
          includeEnv: ${{ parameters.variableIncludeEnv }}
          includeEnvRegion: ${{ parameters.variableIncludeEnvRegion }}

    steps:
      # Use locked sources for RTL integrity
      - ${{ if eq(parameters.useLockedSources, true) }}:
          - checkout: PipelineCommon
          - template: steps/download-artifact.yml@PipelineCommon
            parameters:
              displayName: Download source snapshot
              artifactName: ${{ parameters.lockedArtifactName }}
              downloadPath: ${{ parameters.lockedSourcePath }}
      - ${{ if eq(parameters.useLockedSources, false) }}:
          - checkout: self
          - checkout: PipelineCommon
      - ${{ if gt(length(parameters.additionalRepositories), 0) }}:
          - ${{ each repo in parameters.additionalRepositories }}:
              - checkout: ${{ repo.alias }}

      # Optional Key Vault secret import
      - ${{ if ne(coalesce(parameters.keyVault.name, ''), '') }}:
          - template: steps/import-keyvault-secrets.yml@PipelineCommon
            parameters:
              displayName: Import Key Vault Secrets
              azureSubscription: ${{ parameters.serviceConnection }}
              keyVaultName: ${{ parameters.keyVault.name }}
              secretsFilter: ${{ coalesce(parameters.keyVault.secretsFilter, '*') }}

      # Optional token replacement (supports multiple patterns)
      - ${{ if eq(parameters.tokenReplaceEnabled, true) }}:
          - ${{ if gt(length(parameters.tokenTargetPatterns), 0) }}:
              - ${{ each tokenPattern in parameters.tokenTargetPatterns }}:
                  - template: steps/replace-tokens.yml@PipelineCommon
                    parameters:
                      displayName: Bicep token replacement (${ tokenPattern })
                      targetFiles: ${{ format('{0}/{1}', parameters.lockedSourcePath, tokenPattern) }}
                      tokenPrefix: ${{ parameters.tokenPrefix }}
                      tokenSuffix: ${{ parameters.tokenSuffix }}
          - ${{ if eq(length(parameters.tokenTargetPatterns), 0) }}:
              - template: steps/replace-tokens.yml@PipelineCommon
                parameters:
                  displayName: Bicep token replacement
                  targetFiles: ${{ format('{0}/**/*.bicepparam', parameters.lockedSourcePath) }}
                  tokenPrefix: ${{ parameters.tokenPrefix }}
                  tokenSuffix: ${{ parameters.tokenSuffix }}

      # Execute Bicep using centralized script
      - template: steps/azurecli.yml@PipelineCommon
        parameters:
          displayName: ${{ coalesce(parameters.displayName, upper(replace(parameters.name, '_', ' '))) }} ${{ parameters.action }}
          azureSubscription: ${{ parameters.serviceConnection }}
          repoAlias: PipelineCommon
          script: bicep_run.ps1
          arguments: >-
            -Action ${{ parameters.action }}
            -Scope ${{ parameters.scope }}
            -ResourceGroupName ${{ parameters.resourceGroupName }}
            -Location ${{ parameters.location }}
            -Template "${{ format('{0}/{1}', parameters.lockedSourcePath, parameters.templatePath) }}"
            -ParametersFile "${{ format('{0}/{1}', parameters.lockedSourcePath, parameters.parametersFile) }}"
            -AdditionalParameters "${{ parameters.additionalParameters }}"
            -ManagementGroupId ${{ parameters.managementGroupId }}
            -SubscriptionId ${{ parameters.subscriptionId }}
            ${{ if ne(parameters.mode, '') }}:-Mode ${{ parameters.mode }}
          workingDirectory: ${{ parameters.lockedSourcePath }}

      # Publish what-if output when requested
      - ${{ if and(eq(parameters.action, 'whatif'), eq(parameters.publishWhatIf, true)) }}:
          - template: steps/publish-artifact.yml@PipelineCommon
            parameters:
              displayName: Publish What-If Output
              artifactName: bicep-whatif-${{ parameters.environmentName }}${{ if ne(parameters.region, '') }}-${{ parameters.region }}
              targetPath: ${{ format('{0}/whatif.txt', parameters.lockedSourcePath) }}
