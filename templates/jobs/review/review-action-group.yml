parameters:
  - name: name
    type: string
    default: review
  - name: displayName
    type: string
    default: Review
  - name: environmentName
    type: string
    default: ""
  - name: region
    type: string
    default: ""
  - name: actionGroup
    type: object
    default: {}
  - name: variableRoot
    type: string
    default: "vars"
  - name: serviceConnection
    type: string
    default: ""
  - name: pool
    type: object
    default: {}
  - name: demands
    type: object
    default: []
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: variableIncludeEnv
    type: boolean
    default: true
  - name: variableIncludeEnvRegion
    type: boolean
    default: true
  - name: variableIncludeRegionOnly
    type: boolean
    default: true
  - name: additionalRepositories
    type: object
    default: []
  - name: keyVault
    type: object
    default: {}
  - name: runTerraformPlan
    type: boolean
    default: true
  - name: runBicepWhatIf
    type: boolean
    default: true

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    variables:
      - template: ../../variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          environmentName: ${{ parameters.environmentName }}
          regionName: ${{ parameters.region }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
          includeRegionOnly: ${{ parameters.variableIncludeRegionOnly }}
          includeEnv: ${{ parameters.variableIncludeEnv }}
          includeEnvRegion: ${{ parameters.variableIncludeEnvRegion }}

    steps:
      - checkout: self
      - checkout: PipelineCommon
        path: s/PipelineCommon
        
      - ${{ if ne(coalesce(parameters.additionalRepositories, ''), '') }}:
          - ${{ each repo in parameters.additionalRepositories }}:
              - checkout: ${{ repo.alias }}
      - template: ../../steps/download-artifact.yml@PipelineCommon
        parameters:
          displayName: Download source snapshot
          artifactName: source-snapshot
          downloadPath: $(Pipeline.Workspace)/locked-sources

      # Optional Key Vault secret import
      - ${{ if ne(coalesce(parameters.keyVault.name, ''), '') }}:
          - template: ../../steps/import-keyvault-secrets.yml@PipelineCommon
            parameters:
              displayName: Import Key Vault Secrets
              azureSubscription: ${{ parameters.serviceConnection }}
              keyVaultName: ${{ parameters.keyVault.name }}
              secretsFilter: ${{ coalesce(parameters.keyVault.secretsFilter, '*') }}

      # Execute each action sequentially within the action group
      - ${{ each action in parameters.actionGroup.actions }}:
          - ${{ if and(eq(action.type, 'terraform'), eq(parameters.runTerraformPlan, true)) }}:
              - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                  - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                      - template: ../../steps/replace-tokens.yml@PipelineCommon
                        parameters:
                          displayName: Terraform token replacement (${ tokenPattern })
                          targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
                          tokenPrefix: ${{ coalesce(action.tokenPrefix, '#{') }}
                          tokenSuffix: ${{ coalesce(action.tokenSuffix, '}') }}
              - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
                  - template: ../../steps/replace-tokens.yml@PipelineCommon
                    parameters:
                      displayName: Terraform token replacement
                      targetFiles: $(Pipeline.Workspace)/locked-sources/${{ action.workingDirectory }}/**/*.tfvars
                      tokenPrefix: ${{ coalesce(action.tokenPrefix, '#{') }}
                      tokenSuffix: ${{ coalesce(action.tokenSuffix, '}') }}
              - template: ../../steps/azurecli.yml@PipelineCommon
                parameters:
                  displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'TERRAFORM'), '_', ' '))) }} (Plan ${{ parameters.region }})
                  azureSubscription: ${{ parameters.serviceConnection }}
                  repoAlias: PipelineCommon
                  script: terraform_run.ps1
                  arguments: >-
                    -Action plan
                    -WorkDir "$(Pipeline.Workspace)/locked-sources/${{ action.workingDirectory }}"
                    -EnvironmentName "${{ parameters.environmentName }}"
                    -VarFilesString "${{ coalesce(action.varFilesString, '') }}"
                  workingDirectory: $(Pipeline.Workspace)/locked-sources
                  ${{ if ne(action.condition, '') }}:
                    condition: ${{ action.condition }}
                  ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
                    condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                  ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
                    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                  ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
                    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
              - template: ../steps/publish-artifact.yml@PipelineCommon
                parameters:
                  displayName: Publish Terraform Plan (${{ coalesce(action.name, 'terraform') }})
                  artifactName: terraform-plan-${{ parameters.environmentName }}-${{ parameters.region }}
                  targetPath: ${{ format('{0}/{1}/tfplan', '$(Pipeline.Workspace)/locked-sources', action.workingDirectory) }}

          # - ${{ if and(eq(action.type, 'bicep'), eq(parameters.runBicepWhatIf, true)) }}:
          #     - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
          #         - ${{ each tokenPattern in action.tokenTargetPatterns }}:
          #             - template: ../../steps/replace-tokens.yml@PipelineCommon
          #               parameters:
          #                 displayName: Bicep token replacement (${ tokenPattern })
          #                 targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
          #                 tokenPrefix: ${{ coalesce(action.tokenPrefix, '#{') }}
          #                 tokenSuffix: ${{ coalesce(action.tokenSuffix, '}') }}
          #     - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
          #         - template: ../../steps/replace-tokens.yml@PipelineCommon
          #           parameters:
          #             displayName: Bicep token replacement
          #             targetFiles: $(Pipeline.Workspace)/locked-sources/**/*.bicepparam
          #             tokenPrefix: ${{ coalesce(action.tokenPrefix, '#{') }}
          #             tokenSuffix: ${{ coalesce(action.tokenSuffix, '}') }}
          #     - template: ../../steps/azurecli.yml@PipelineCommon
          #       parameters:
          #         displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'BICEP'), '_', ' '))) }} (What-If ${{ parameters.region }})
          #         azureSubscription: ${{ parameters.serviceConnection }}
          #         repoAlias: PipelineCommon
          #         script: bicep_run.ps1
          #         arguments: >-
          #           -Action whatif
          #           -Scope ${{ action.scope }}
          #           -ResourceGroupName ${{ action.resourceGroupName }}
          #           -Location ${{ action.location }}
          #           -Template "$(Pipeline.Workspace)/locked-sources/${{ action.templatePath }}"
          #           -ParametersFile "$(Pipeline.Workspace)/locked-sources/${{ action.parametersFile }}"
          #           -AdditionalParameters "${{ action.additionalParameters }}"
          #           -ManagementGroupId ${{ action.managementGroupId }}
          #           -SubscriptionId ${{ action.subscriptionId }}
          #           -ModeOverride ${{ parameters.bicepModeOverride }}
          #           -Mode ${{ action.mode }}
          #         workingDirectory: $(Pipeline.Workspace)/locked-sources
          #         ${{ if ne(action.condition, '') }}:
          #           condition: ${{ action.condition }}
          #         ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
          #           condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
          #         ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
          #           condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
          #         ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
          #           condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
          #     - template: ../../steps/publish-artifact.yml@PipelineCommon
          #       parameters:
          #         displayName: Publish What-If Output (${{ coalesce(action.name, 'bicep') }})
          #         artifactName: bicep-whatif-${{ parameters.environmentName }}-${{ parameters.region }}
          #         targetPath: ${{ format('{0}/whatif.txt', '$(Pipeline.Workspace)/locked-sources') }}

          # - ${{ if eq(action.type, 'powershell') }}:
          #     - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
          #         - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
          #             - ${{ each tokenPattern in action.tokenTargetPatterns }}:
          #                 - template: ../steps/replace-tokens.yml@PipelineCommon
          #                   parameters:
          #                     displayName: PowerShell token replacement (${ tokenPattern })
          #                     targetFiles: $(Pipeline.Workspace)/locked-sources/${{ tokenPattern }}
          #                     tokenPrefix: ${{ coalesce(action.tokenPrefix, '#{') }}
          #                     tokenSuffix: ${{ coalesce(action.tokenSuffix, '}') }}
          #     - ${{ if gt(coalesce(action.delayMinutes, 0), 0) }}:
          #         - task: Delay@1
          #           inputs:
          #             delayForMinutes: ${{ action.delayMinutes }}
          #     - template: ../../steps/powershell.yml@PipelineCommon
          #       parameters:
          #         displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))) }} (Review ${{ parameters.region }})
          #         scriptFullPath: $(Pipeline.Workspace)/locked-sources/${{ action.scriptPath }}
          #         arguments: ${{ action.arguments }}
          #         ${{ if ne(action.condition, '') }}:
          #           condition: ${{ action.condition }}
          #         ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
          #           condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
          #         ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
          #           condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
          #         ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
          #           condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
