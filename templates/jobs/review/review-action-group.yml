parameters:
  - name: name
    type: string
    default: review
  - name: displayName
    type: string
    default: Review
  - name: environmentName
    type: string
    default: ""
  - name: region
    type: string
    default: ""
  - name: actionGroup
    type: object
    default: {}
  - name: variableRoot
    type: string
    default: "vars"
  - name: serviceConnection
    type: string
    default: ""
  - name: pool
    type: object
    default: {}
  - name: demands
    type: object
    default: []
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: variableIncludeEnv
    type: boolean
    default: true
  - name: variableIncludeEnvRegion
    type: boolean
    default: true
  - name: variableincludeRegion
    type: boolean
    default: true
  - name: additionalRepositories
    type: object
    default: []
  - name: keyVault
    type: object
    default: {}
  - name: dependsOnActionGroups
    type: object
    default: []
  - name: useLockedSources
    type: boolean
    default: true
  - name: sourcePath
    type: string
    default: $(Pipeline.Workspace)/s/self

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    variables:
      - template: ../../variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          environmentName: ${{ parameters.environmentName }}
          regionName: ${{ parameters.region }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
          includeRegion: ${{ parameters.variableincludeRegion }}
          includeEnv: ${{ parameters.variableIncludeEnv }}
          includeEnvRegion: ${{ parameters.variableIncludeEnvRegion }}

    steps:
      - ${{ if eq(parameters.useLockedSources, false) }}:
          - checkout: self
            path: s/self
      - checkout: PipelineCommon
        path: s/PipelineCommon

      - ${{ if eq(parameters.useLockedSources, true) }}:
          - template: ../../steps/download-artifact.yml@PipelineCommon
            parameters:
              displayName: Download source snapshot
              artifactName: source-snapshot
              downloadPath: ${{ parameters.sourcePath }}

      - ${{ if ne(coalesce(parameters.additionalRepositories, ''), '') }}:
          - ${{ each repo in parameters.additionalRepositories }}:
              - checkout: ${{ repo.alias }}

      # Optional Key Vault secret import
      - ${{ if ne(coalesce(parameters.keyVault.name, ''), '') }}:
          - template: ../../steps/import-keyvault-secrets.yml@PipelineCommon
            parameters:
              displayName: Import Key Vault Secrets
              azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
              keyVaultName: ${{ parameters.keyVault.name }}
              secretsFilter: ${{ coalesce(parameters.keyVault.secretsFilter, '*') }}

      # Terraform Action
      - ${{ if and(eq(parameters.actionGroup.type, 'terraform'), ne(lower(format('{0}', coalesce(parameters.actionGroup.runTerraformPlan, true))), 'false'), ne(coalesce(parameters.actionGroup.actions, ''), '')) }}:
          # Optional token replacement at action group level
          - ${{ if eq(coalesce(parameters.actionGroup.tokenReplaceEnabled, false), true) }}:
              - ${{ if ne(coalesce(parameters.actionGroup.tokenTargetPatterns, ''), '') }}:
                  - ${{ each tokenPattern in parameters.actionGroup.tokenTargetPatterns }}:
                      - template: ../../steps/replace-tokens.yml@PipelineCommon
                        parameters:
                          displayName: Terraform token replacement (${ tokenPattern })
                          targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                          tokenPrefix: ${{ coalesce(parameters.actionGroup.tokenPrefix, '#{{') }}
                          tokenSuffix: ${{ coalesce(parameters.actionGroup.tokenSuffix, '}}') }}
              - ${{ if eq(coalesce(parameters.actionGroup.tokenTargetPatterns, ''), '') }}:
                  - ${{ each terraformAction in parameters.actionGroup.actions }}:
                      - template: ../../steps/replace-tokens.yml@PipelineCommon
                        parameters:
                          displayName: Terraform token replacement (${ coalesce(terraformAction.name, terraformAction.workingDirectory) })
                          targetFiles: ${{ format('{0}/{1}/**/*.tfvars', parameters.sourcePath, terraformAction.workingDirectory) }}
                          tokenPrefix: ${{ coalesce(parameters.actionGroup.tokenPrefix, '#{{') }}
                          tokenSuffix: ${{ coalesce(parameters.actionGroup.tokenSuffix, '}}') }}
          - ${{ each action in parameters.actionGroup.actions }}:
              - ${{ if ne(action.enabled, false) }}:
                  - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                      - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                          - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                              - template: ../../steps/replace-tokens.yml@PipelineCommon
                                parameters:
                                  displayName: Terraform token replacement (${ tokenPattern })
                                  targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                  tokenPrefix: ${{ coalesce(action.tokenPrefix, parameters.actionGroup.tokenPrefix, '#{{') }}
                                  tokenSuffix: ${{ coalesce(action.tokenSuffix, parameters.actionGroup.tokenSuffix, '}}') }}
                      - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
                          - template: ../../steps/replace-tokens.yml@PipelineCommon
                            parameters:
                              displayName: Terraform token replacement (default)
                              targetFiles: ${{ format('{0}/{1}/**/*.tfvars', parameters.sourcePath, action.workingDirectory) }}
                              tokenPrefix: ${{ coalesce(action.tokenPrefix, parameters.actionGroup.tokenPrefix, '#{{') }}
                              tokenSuffix: ${{ coalesce(action.tokenSuffix, parameters.actionGroup.tokenSuffix, '}}') }}
                  - template: ../../steps/azurecli.yml@PipelineCommon
                    parameters:
                      displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'TERRAFORM'), '_', ' '))) }} - Plan
                      azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                      repoAlias: PipelineCommon
                      script: terraform_run.ps1
                      arguments: >-
                        -Action plan
                        -WorkDir "${{ format('{0}/{1}', parameters.sourcePath, action.workingDirectory) }}"
                        -EnvironmentName "${{ parameters.environmentName }}"
                        -VarFilesString "${{ coalesce(action.varFilesString, '') }}"
                      workingDirectory: ${{ parameters.sourcePath }}
                      ${{ if ne(action.condition, '') }}:
                        condition: ${{ action.condition }}
                      ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
                        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                      ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
                        condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                      ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
                        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
                  - template: ../../steps/publish-artifact.yml@PipelineCommon
                    parameters:
                      displayName: Publish Terraform Plan (${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'TERRAFORM'), '_', ' '))) }})
                      artifactName: terraform-plan-${{ coalesce(action.name, 'terraform') }}-${{ parameters.environmentName }}-${{ parameters.region }}
                      targetPath: ${{ format('{0}/{1}/tfplan', parameters.sourcePath, action.workingDirectory) }}

      # Bicep Action
      - ${{ if and(eq(parameters.actionGroup.type, 'bicep'), ne(lower(format('{0}', coalesce(parameters.actionGroup.runBicepWhatIf, true))), 'false'), ne(coalesce(parameters.actionGroup.actions, ''), '')) }}:
          # Optional token replacement at action group level
          - ${{ if eq(coalesce(parameters.actionGroup.tokenReplaceEnabled, false), true) }}:
              - ${{ if ne(coalesce(parameters.actionGroup.tokenTargetPatterns, ''), '') }}:
                  - ${{ each tokenPattern in parameters.actionGroup.tokenTargetPatterns }}:
                      - template: ../../steps/replace-tokens.yml@PipelineCommon
                        parameters:
                          displayName: Bicep token replacement (${ tokenPattern })
                          targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                          tokenPrefix: ${{ coalesce(parameters.actionGroup.tokenPrefix, '#{{') }}
                          tokenSuffix: ${{ coalesce(parameters.actionGroup.tokenSuffix, '}}') }}
              - ${{ if eq(coalesce(parameters.actionGroup.tokenTargetPatterns, ''), '') }}:
                  - template: ../../steps/replace-tokens.yml@PipelineCommon
                    parameters:
                      displayName: Bicep token replacement (group default)
                      targetFiles: ${{ format('{0}/**/*.bicepparam', parameters.sourcePath) }}
                      tokenPrefix: ${{ coalesce(parameters.actionGroup.tokenPrefix, '#{{') }}
                      tokenSuffix: ${{ coalesce(parameters.actionGroup.tokenSuffix, '}}') }}
          - ${{ each action in parameters.actionGroup.actions }}:
              - ${{ if ne(action.enabled, false) }}:
                  - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                      - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                          - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                              - template: ../../steps/replace-tokens.yml@PipelineCommon
                                parameters:
                                  displayName: Bicep token replacement (${ tokenPattern })
                                  targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                  tokenPrefix: ${{ coalesce(action.tokenPrefix, parameters.actionGroup.tokenPrefix, '#{{') }}
                                  tokenSuffix: ${{ coalesce(action.tokenSuffix, parameters.actionGroup.tokenSuffix, '}}') }}
                      - ${{ if eq(coalesce(action.tokenTargetPatterns, ''), '') }}:
                          - ${{ if ne(coalesce(action.parametersPath, ''), '') }}:
                              - template: ../../steps/replace-tokens.yml@PipelineCommon
                                parameters:
                                  displayName: Bicep token replacement (${{ action.parametersPath }})
                                  targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, action.parametersPath) }}
                                  tokenPrefix: ${{ coalesce(action.tokenPrefix, parameters.actionGroup.tokenPrefix, '#{{') }}
                                  tokenSuffix: ${{ coalesce(action.tokenSuffix, parameters.actionGroup.tokenSuffix, '}}') }}
                  - template: ../../steps/azurecli.yml@PipelineCommon
                    parameters:
                      displayName: ${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'BICEP'), '_', ' '))) }} - What-If
                      azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
                      repoAlias: PipelineCommon
                      script: bicep_run.ps1
                      arguments: >-
                        -Action "whatif"
                        -Name "${{ action.name }}"
                        -Scope "${{ action.scope }}"
                        -ResourceGroupName "${{ action.resourceGroupName }}"
                        -Location "${{ action.location }}"
                        -Template "${{ format('{0}/{1}', parameters.sourcePath, action.templatePath) }}"
                        -ParametersPath "${{ action.parametersPath }}"
                        -AdditionalParameters "${{ action.additionalParameters }}"
                        -ManagementGroupId "${{ action.managementGroupId }}"
                        -SubscriptionId "${{ action.subscriptionId }}"
                        -ModeOverride "${{ parameters.bicepModeOverride }}"
                        -Mode "${{ coalesce(replace(replace(format('{0}', eq(coalesce(action.allowDeleteOnUnmanage, false), true)), 'True', 'complete'), 'False', ''), coalesce(action.mode, 'incremental')) }}"
                        -AllowDeleteOnUnmanage ${{ format('{0}', eq(coalesce(action.allowDeleteOnUnmanage, false), true)) }}
                        -CleanupStack ${{ format('{0}', eq(coalesce(action.cleanupStack, false), true)) }}
                      workingDirectory: ${{ parameters.sourcePath }}
                      ${{ if ne(action.condition, '') }}:
                        condition: ${{ action.condition }}
                      ${{ if and(eq(action.condition, ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
                        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                      ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
                        condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                      ${{ if and(eq(action.condition, ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
                        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
                  - template: ../../steps/publish-artifact.yml@PipelineCommon
                    parameters:
                      displayName: Publish What-If Output (${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'BICEP'), '_', ' '))) }})
                      artifactName: bicep-whatif-${{ coalesce(action.name, 'bicep') }}-${{ parameters.environmentName }}-${{ parameters.region }}
                      targetPath: ${{ format('{0}/whatif.txt', parameters.sourcePath) }}
                  - template: ../../steps/publish-artifact.yml@PipelineCommon
                    parameters:
                      displayName: Publish Stack Output (${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'BICEP'), '_', ' '))) }})
                      artifactName: bicep-stack-${{ coalesce(action.name, 'bicep') }}-${{ parameters.environmentName }}-${{ parameters.region }}
                      targetPath: ${{ format('{0}/stack.csv', parameters.sourcePath) }}

      # PowerShell Action
      - ${{ if and(eq(parameters.actionGroup.type, 'powershell'), eq(lower(format('{0}', coalesce(parameters.actionGroup.runPowerShellReview, false))), 'true'), ne(coalesce(parameters.actionGroup.actions, ''), '')) }}:
          # Optional token replacement at action group level
          - ${{ if eq(coalesce(parameters.actionGroup.tokenReplaceEnabled, false), true) }}:
              - ${{ if ne(coalesce(parameters.actionGroup.tokenTargetPatterns, ''), '') }}:
                  - ${{ each tokenPattern in parameters.actionGroup.tokenTargetPatterns }}:
                      - template: ../../steps/replace-tokens.yml@PipelineCommon
                        parameters:
                          displayName: PowerShell token replacement (${ tokenPattern })
                          targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                          tokenPrefix: ${{ coalesce(parameters.actionGroup.tokenPrefix, '#{{') }}
                          tokenSuffix: ${{ coalesce(parameters.actionGroup.tokenSuffix, '}}') }}

          - ${{ each action in parameters.actionGroup.actions }}:
              - ${{ if and(ne(action.enabled, false), ne(coalesce(action.reviewScriptFullPath, action.reviewScriptPath, ''), '')) }}:
                  # Optional per-action token replacement
                  - ${{ if eq(coalesce(action.tokenReplaceEnabled, false), true) }}:
                      - ${{ if ne(coalesce(action.tokenTargetPatterns, ''), '') }}:
                          - ${{ each tokenPattern in action.tokenTargetPatterns }}:
                              - template: ../../steps/replace-tokens.yml@PipelineCommon
                                parameters:
                                  displayName: PowerShell token replacement (${ tokenPattern })
                                  targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                                  tokenPrefix: ${{ coalesce(action.tokenPrefix, parameters.actionGroup.tokenPrefix, '#{{') }}
                                  tokenSuffix: ${{ coalesce(action.tokenSuffix, parameters.actionGroup.tokenSuffix, '}}') }}

                  - template: ../../steps/powershell.yml@PipelineCommon
                    parameters:
                      displayName: ${{ coalesce(action.reviewDisplayName, action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))) }} - Review
                      ${{ if ne(coalesce(action.reviewScriptFullPath, ''), '') }}:
                        scriptFullPath: ${{ action.reviewScriptFullPath }}
                      ${{ if and(eq(coalesce(action.reviewScriptFullPath, ''), ''), ne(coalesce(action.reviewScriptPath, ''), '')) }}:
                        scriptFullPath: ${{ format('{0}/{1}', parameters.sourcePath, action.reviewScriptPath) }}
                      arguments: ${{ coalesce(action.reviewArguments, action.arguments, '') }}
                      scriptTask: ${{ coalesce(action.reviewScriptTask, action.scriptTask, parameters.actionGroup.scriptTask, 'pwsh') }}
                      ${{ if ne(coalesce(action.reviewWorkingDirectory, ''), '') }}:
                        workingDirectory: ${{ format('{0}/{1}', parameters.sourcePath, action.reviewWorkingDirectory) }}
                      ${{ if and(eq(coalesce(action.reviewWorkingDirectory, ''), ''), ne(coalesce(action.reviewWorkingDirectoryFullPath, ''), '')) }}:
                        workingDirectory: ${{ action.reviewWorkingDirectoryFullPath }}
                      ${{ if and(eq(coalesce(action.reviewWorkingDirectory, ''), ''), eq(coalesce(action.reviewWorkingDirectoryFullPath, ''), ''), ne(coalesce(action.workingDirectory, ''), '')) }}:
                        workingDirectory: ${{ format('{0}/{1}', parameters.sourcePath, action.workingDirectory) }}
                      ${{ if and(eq(coalesce(action.reviewWorkingDirectory, ''), ''), eq(coalesce(action.reviewWorkingDirectoryFullPath, ''), ''), eq(coalesce(action.workingDirectory, ''), '')) }}:
                        workingDirectory: ${{ parameters.sourcePath }}
                      ${{ if ne(coalesce(action.reviewServiceConnection, action.serviceConnection, parameters.actionGroup.serviceConnection, variables[parameters.serviceConnection], parameters.serviceConnection), '') }}:
                        azureSubscription: ${{ coalesce(action.reviewServiceConnection, action.serviceConnection, parameters.actionGroup.serviceConnection, variables[parameters.serviceConnection], parameters.serviceConnection) }}
                      ${{ if ne(coalesce(action.reviewAzurePowerShellVersion, action.azurePowerShellVersion, parameters.actionGroup.azurePowerShellVersion, ''), '') }}:
                        azurePowerShellVersion: ${{ coalesce(action.reviewAzurePowerShellVersion, action.azurePowerShellVersion, parameters.actionGroup.azurePowerShellVersion) }}
                      addSpnToEnvironment: ${{ eq(lower(coalesce(action.reviewScriptTask, action.scriptTask, parameters.actionGroup.scriptTask, 'pwsh')), 'azurecli') }}
                    ${{ if ne(coalesce(action.reviewCondition, action.condition, ''), '') }}:
                      condition: ${{ coalesce(action.reviewCondition, action.condition) }}
                    ${{ if and(eq(coalesce(action.reviewCondition, action.condition, ''), ''), eq(coalesce(action.runConditions.manualOnly, false), true)) }}:
                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
                    ${{ if and(eq(coalesce(action.reviewCondition, action.condition, ''), ''), ne(coalesce(action.runConditions.manualOnly, false), true), eq(coalesce(action.runConditions.scheduleOnly, false), true)) }}:
                      condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
                    ${{ if and(eq(coalesce(action.reviewCondition, action.condition, ''), ''), ne(coalesce(action.runConditions.manualOnly, false), true), ne(coalesce(action.runConditions.scheduleOnly, false), true), eq(coalesce(action.runConditions.prOnly, false), true)) }}:
                      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
                  - ${{ if ne(coalesce(action.publishReviewOutput, false), false) }}:
                      - template: ../../steps/publish-artifact.yml@PipelineCommon
                        parameters:
                          displayName: Publish PowerShell Review Output (${{ coalesce(action.displayName, upper(replace(coalesce(action.name, 'POWERSHELL'), '_', ' '))) }})
                          artifactName: powershell-review-${{ coalesce(action.name, 'powershell') }}-${{ parameters.environmentName }}-${{ parameters.region }}
                          targetPath: ${{ format('{0}/output', parameters.sourcePath) }}
