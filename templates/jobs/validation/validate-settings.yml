parameters:
  - name: environments
    type: object
    default: []
  - name: pool
    type: object
    default: {}
  - name: dependsOnStages
    type: object
    default: []

jobs:
  - job: validate_settings
    displayName: Validate Settings
    dependsOn: ${{ parameters.dependsOnStages }}
    pool:
      ${{ if ne(coalesce(parameters.pool.name, ''), '') }}:
        name: ${{ parameters.pool.name }}
      ${{ if and(eq(coalesce(parameters.pool.name, ''), ''), ne(coalesce(parameters.pool.vmImage, ''), '')) }}:
        vmImage: ${{ parameters.pool.vmImage }}

    steps:
      - checkout: none
      - checkout: PipelineCommon
      
      # Always validate defaults
      - template: ../../steps/powershell.yml@PipelineCommon
        parameters:
          displayName: Validate default pool
          repoAlias: PipelineCommon
          script: validate_pools.ps1
          arguments: >-
            -DefaultPoolName "${{ coalesce(parameters.pool.name, '') }}"
            -DefaultPoolVmImage "${{ coalesce(parameters.pool.vmImage, '') }}"

        # One run per environment
        ${{ each env in parameters.environments }}:
          - template: ../../steps/powershell.yml@PipelineCommon
            parameters:
              displayName: "Validate pool config for ${{ env.name }}"
              repoAlias: PipelineCommon
              script: validate_pools.ps1
              arguments: >-
                -EnvPools @{ envName='${{ env.name }}'; name='${{ coalesce(env.pool.name, '') }}'; vmImage='${{ coalesce(env.pool.vmImage, '') }}' }

          - template: ../../steps/powershell.yml@PipelineCommon
            parameters:
              displayName: "Validate environment model â€” ${{ env.name }}"
              repoAlias: PipelineCommon
              script: validate_environment_model.ps1
              arguments: >-
                -Name '${{ env.name }}'
                -Class '${{ env.class }}'
                -DependsOn '${{ coalesce(env.dependsOn, '') }}'