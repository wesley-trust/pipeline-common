parameters:
  - name: environments
    type: object
    default: []
  - name: pool
    type: object
    default: {}
  - name: dependsOnStages
    type: object
    default: []
  - name: additionalRepositories
    type: object
    default: []
  - name: enableProduction
    type: boolean
    default: false

jobs:
  - job: validate_settings
    displayName: Validate Settings
    dependsOn: ${{ parameters.dependsOnStages }}
    steps:
      - checkout: PipelineCommon
        path: s/PipelineCommon
      - ${{ if ne(coalesce(parameters.additionalRepositories, ''), '') }}:
          - ${{ each repo in parameters.additionalRepositories }}:
              - checkout: ${{ repo.alias }}

      # Always validate defaults
      - template: ../../steps/powershell.yml@PipelineCommon
        parameters:
          displayName: Validate default pool
          repoAlias: PipelineCommon
          script: validate_pools.ps1
          arguments: >-
            -DefaultPoolName '${{ coalesce(parameters.pool.name, '') }}'
            -DefaultPoolVmImage '${{ coalesce(parameters.pool.vmImage, '') }}'

      - template: ../../steps/powershell.yml@PipelineCommon
        parameters:
          displayName: "Validate environment model"
          repoAlias: PipelineCommon
          script: validate_environment_model.ps1
          arguments: >-
            -EnvironmentsJson '${{ convertToJson(parameters.environments) }}'

        # One run per environment
      - ${{ each env in parameters.environments }}:
          - ${{ if ne(env.skipEnvironment, true) }}:
              - ${{ if or(ne(env.class, 'production'), eq(parameters.enableProduction, true)) }}:
                  - template: ../../steps/powershell.yml@PipelineCommon
                    parameters:
                      displayName: "Validate pool config: ${{ upper(env.name) }}"
                      repoAlias: PipelineCommon
                      script: validate_pools.ps1
                      arguments: >-
                        -EnvPools @{ envName='${{ env.name }}'; name='${{ coalesce(env.pool.name, '') }}'; vmImage='${{ coalesce(env.pool.vmImage, '') }}' }
