parameters:
  - name: name
    type: string
    default: ps
  - name: displayName
    type: string
    default: PowerShell
  - name: scriptPath
    type: string
    default: ""
  - name: scriptFullPath
    type: string
    default: ""
  - name: arguments
    type: string
    default: ""
  - name: pwsh
    type: boolean
    default: true
  - name: scriptTask
    type: string
    default: pwsh
  - name: azurePowerShellVersion
    type: string
    default: LatestVersion
  - name: variableFiles
    type: object
    default: {}
  - name: variableRoot
    type: string
    default: "vars"
  - name: environmentName
    type: string
    default: ""
  - name: region
    type: string
    default: ""
  - name: useLockedSources
    type: boolean
    default: true
  - name: lockedArtifactName
    type: string
    default: source-snapshot
  - name: sourcePath
    type: string
    default: $(Pipeline.Workspace)/s/self
  - name: workingDirectory
    type: string
    default: ""
  - name: workingDirectoryFullPath
    type: string
    default: ""
  - name: pool
    type: object
    default: {}
  - name: dependsOn
    type: object
    default: []
  - name: serviceConnection
    type: string
    default: ""
  - name: keyVault
    type: object
    default: {}
  - name: additionalRepositories
    type: object
    default: []
  - name: variableIncludeCommon
    type: boolean
    default: true
  - name: variableIncludeEnv
    type: boolean
    default: true
  - name: variableIncludeEnvRegion
    type: boolean
    default: true
  - name: variableincludeRegion
    type: boolean
    default: true
  - name: testsDeploymentSuffixEnabled
    type: boolean
    default: false
  - name: testsDeploymentSuffixToken
    type: string
    default: ""
  - name: tokenReplaceEnabled
    type: boolean
    default: false
  - name: tokenTargetPatterns
    type: object
    default: []
  - name: tokenPrefix
    type: string
    default: "#{{"
  - name: tokenSuffix
    type: string
    default: "}}"

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    dependsOn: ${{ parameters.dependsOn }}
    variables:
      - template: ../variables/include.yml@PipelineCommon
        parameters:
          variableRoot: ${{ parameters.variableRoot }}
          environmentName: ${{ parameters.environmentName }}
          regionName: ${{ parameters.region }}
          includeCommon: ${{ parameters.variableIncludeCommon }}
          includeRegion: ${{ parameters.variableincludeRegion }}
          includeEnv: ${{ parameters.variableIncludeEnv }}
          includeEnvRegion: ${{ parameters.variableIncludeEnvRegion }}
      - ${{ if eq(parameters.testsDeploymentSuffixEnabled, true) }}:
          - template: ../variables/tests-deployment-suffix.yml@PipelineCommon
            parameters:
              baseDeploymentVersion: ${{ variables.deploymentVersion }}
              suffixToken: ${{ parameters.testsDeploymentSuffixToken }}

    steps:
      # Use locked sources for RTL integrity
      - ${{ if eq(parameters.useLockedSources, true) }}:
          - template: ../steps/download-artifact.yml@PipelineCommon
            parameters:
              displayName: Download source snapshot
              artifactName: ${{ parameters.lockedArtifactName }}
              downloadPath: ${{ parameters.sourcePath }}
      - ${{ if eq(parameters.useLockedSources, false) }}:
          - checkout: self
            path: s/self
      - checkout: PipelineCommon
        path: s/PipelineCommon
      - ${{ if ne(coalesce(parameters.additionalRepositories, ''), '') }}:
          - ${{ each repo in parameters.additionalRepositories }}:
              - checkout: ${{ repo.alias }}

      # Optional Key Vault secret import
      - ${{ if ne(coalesce(parameters.keyVault.name, ''), '') }}:
          - template: ../steps/import-keyvault-secrets.yml@PipelineCommon
            parameters:
              displayName: Import Key Vault Secrets
              azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
              keyVaultName: ${{ parameters.keyVault.name }}
              secretsFilter: ${{ coalesce(parameters.keyVault.secretsFilter, '*') }}

      # Optional token replacement for PowerShell action runs
      - ${{ if eq(parameters.tokenReplaceEnabled, true) }}:
          - ${{ if gt(length(parameters.tokenTargetPatterns), 0) }}:
              - ${{ each tokenPattern in parameters.tokenTargetPatterns }}:
                  - template: ../steps/replace-tokens.yml@PipelineCommon
                    parameters:
                      displayName: PowerShell token replacement (${{ tokenPattern }})
                      targetFiles: ${{ format('{0}/{1}', parameters.sourcePath, tokenPattern) }}
                      tokenPrefix: ${{ parameters.tokenPrefix }}
                      tokenSuffix: ${{ parameters.tokenSuffix }}

      # Execute a script from the shared scripts directory
      - template: ../steps/powershell.yml@PipelineCommon
        parameters:
          displayName: Run Script
          repoAlias: PipelineCommon
          scriptTask: ${{ parameters.scriptTask }}
          ${{ if ne(parameters.scriptFullPath, '') }}:
            scriptFullPath: ${{ parameters.scriptFullPath }}
          ${{ if and(eq(parameters.scriptFullPath, ''), ne(parameters.scriptPath, '')) }}:
            scriptFullPath: ${{ format('{0}/{1}', parameters.sourcePath, parameters.scriptPath) }}
          arguments: ${{ parameters.arguments }}
          pwsh: ${{ parameters.pwsh }}
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          ${{ if ne(coalesce(parameters.serviceConnection, ''), '') }}:
            azureSubscription: ${{ coalesce(variables[parameters.serviceConnection], parameters.serviceConnection) }}
          addSpnToEnvironment: ${{ eq(lower(parameters.scriptTask), 'azurecli') }}
          ${{ if ne(coalesce(parameters.workingDirectory, ''), '') }}:
            workingDirectory: ${{ format('{0}/{1}', parameters.sourcePath, parameters.workingDirectory) }}
          ${{ if and(eq(coalesce(parameters.workingDirectory, ''), ''), ne(coalesce(parameters.workingDirectoryFullPath, ''), '')) }}:
            workingDirectory: ${{ parameters.workingDirectoryFullPath }}
          ${{ if and(eq(coalesce(parameters.workingDirectory, ''), ''), eq(coalesce(parameters.workingDirectoryFullPath, ''), '')) }}:
            workingDirectory: ${{ parameters.sourcePath }}
